1. 그래프 탐색(그래프 순회)
- 하나의 시작점 노드에서 연결된 노드들을 모두 찾는 것
- 시작점 노드가 어떤 노드와 연결되어 있는지 알 수 있다
- 최단 거리를 알 수 있다

2. BFS(breadth first search)
    2.1 개요
    - 너비를 우선적으로 탐색하는 방식
    - 수평적으로 탐색

    2.2 알고리즘
    - 시작 노드를 방문 표시 후, 큐에 넣음
    - 큐에 아무 노드가 없을 때까지
        - 큐 가장 앞 노드를 꺼낸다
        - 꺼낸 노드에 인접한 노드들을 모두 보면서
            - 처음 방문한 노드면
                - 방문한 노드 표시를 해준다
                - 큐에 넣어준다
    
    2.3 시간 복잡도
        2.3.1 전처리
        - 모든 노드를 방문하지 않은 상태로 만듬
        - O(V)

        2.3.2 큐에 노드를 넣고 빼는데 걸리는 시간
        - 방문한 노드들은 다시 큐에 들어가지 않는다, 즉 큐에 들어가는 노드는 딱 한 번 들어간다
        - 큐는 더블리 링크드 리스트를 사용하며 삽입과 꺼내오는 연산을 O(1)로 할 수 있다
        - 최대 V개가 들어갈 수 있으니
        - O(V)

        2.3.3 큐에서 뺀 노드의 인접한 노드들을 도는데 걸리는 시간
        - 모든 노드들은 인접 리스트를 딱 한 번 돌 수 있다(큐에 한 번만 들어갈 수 있으므로)
        - 그렇기에 E와 비례
        - O(E)

        2.3.4 결론
        - O(2V + E) = O(V + E)

3. DFS(depth first search)
    3.1 개요
    - 깊이를 우선적으로 탐색하는 방식
    - 수직적으로 탐색

    3.2 알고리즘
    - 시작 노드를 옅은 회색 표시 후, 스택에 넣음
    - 스택에 아무 노드가 없을 때까지
        - 스택 가장 위 노드를 꺼낸다
        - 노드를 방문 (진한 회색) 표시한다
        - 인접한 노드들을 모두 보면서
            - 처음 방문하거나 스택에 없는 노드면
                - 옅은 회색 표시를 해준다
                - 스택에 넣어준다

    3.3 시간 복잡도
        3.3.1 전처리
        - 모든 노드를 다 돌아야 함
        - O(V)

        3.3.2  스택에 노드를 넣고 빼는데 걸리는 시간
        - 같은 노드가 스택에 두 번 들어갈 수 없다
        - 삽입과 꺼내는 것은 O(1)
        - 최악의 경우 O(V)

        3.3.3 스택에서 뺀 노드들의 인접한 노드들을 도는데 걸리는 시간
        - 모든 노드들의 인접 리스트를 딱 한 번만 돌 수 있음(같은 노드가 스택에 두 번 들어갈 수 없음)
        - E에 비례
        - O(E)

        3.3.4 정리
        - O(2V + E) = O(V + E)
