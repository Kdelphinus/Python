1. 계층적 관계
- 데이터의 상하관계를 저장하는 자료구조

    1.1 상하관계(계층적 구조)
    - 회사를 예시로 들 때, 사장 - 이사 - 사원 들로 이어지는 것
    - 밑으로 갈 수록 수가 많아짐
    - 부모, 자식 클래스 등도 그 예시
    - 선형적 자료 구조(배열, 링크드 리스트)나 데이터 관계 저장(해시 테이블)은 적합하지 않음

2. 트리
- 자식 노드를 가리키는 레퍼런스를 가짐

    2.1 용어
    - root 노드: 가장 위에 위치하는 노드
    - 부모 노드: 특정 노드의 직속 상위 노드
    - 자식 노드: 특정 노드의 직속 하위 노드
    - 형제 노드: 같은 부모 노드를 갖는 노드
    - leaf 노드(잎/말단 노드): 자식 노드를 가지지 않는, 가장 말단에 있는 노드
    - 깊이: 특정 노드가 root 노드로부터 떨어진 거리, 몇 번 아래로 내려와야 하는지를 나타냄
    - 레벨: 깊이 + 1, 깊이와 거의 유사한 개념
    - 높이: 트리에서 가장 깊이 있는 노드의 깊이
    - 부분 트리: 현재 트리의 일부분을 이루고 있는 더 작은 트리

    2.2 활용
    - 계층적 관계가 있는 데이터를 컴퓨터에서 사용 가능
    - 컴퓨터 과학의 다양한 문제들을 기발하게 해결(정렬, 압축 등)
    - 다양한 추상 자료형 구현(딕셔너리, 세트, 우선순위 큐 등)

3. 이진 트리
- 각 노드가 최대 2개의 자식 노드만 가질 수 있다
- 따라서 자식 노드를 왼쪽 자식과 오른쪽 자식으로 구분하여 부름
    
    3.1 구현
    - '2. 이진 트리.py' 참고

    3.2 종류
        3.2.1 정 이진 트리(full binary tree)
        - 모든 노드가 2개 또는 0개의 자식을 갖는 이진 트리에서

        3.2.2 완전 이진 트리(complete binary tree)
        - 마지막 레벨을 제외한 모든 레벨에서 노드들이 꽉 차있고
        - 마지막 레벨 노드는 트리의 맨 왼쪽부터 있어야 한다(꽉 채워질 필요는 없음)
        - 완전 이진 트리의 높이는 항상 lg(n)과 비례, 즉 O(lg(n))의 시간복잡도
        - '3. 완전 이진 트리.py' 참고

        3.2.3 포화 이진 트리(perfect binary tree)
        - 모든 레벨이 빠짐없이 다 노드로 채워져있는 이진 트리
        - 트리의 높이를 h, 노드 수를 n이라 하면
          n = 2 ** (h + 1) - 1

4. 트리 순회
- 자료 구조에 저장된 모든 데이터를 도는 것
- 재귀 함수를 주로 사용

    4.1 재귀를 통한 트리 순회
    - 1. 재귀적으로 왼쪽 부분 트리 순회
    - 2. 재귀적으로 오른쪽 부분 트리 순회
    - 3. 현재 노드 데이터를 출력 (출력이 아니라 다른 목표면 출력만 바꿔주면 된다)

    4.2 여러 방법들
        4.2.1 pre-order
        - 3 -> 1 -> 2 순서로 순회를 진행
        - root 노드 출력 -> 왼쪽 부분 출력 -> 오른쪽 부분 출력

        4.2.2 post-order
        - 1 -> 2 -> 3 순서로 순회를 진행
        - 왼쪽 부분 출력 -> 오른쪽 부분 출력 -> root 노드 출력

        4.2.3 in-order
        - 2 -> 3 -> 1 순서로 순회를 진행
        - 왼쪽 부분 출력 -> root 노드 출력 -> 오른쪽 부분 출력

        4.2.4 선형적 관계
        - 방법에 따라 규칙적인 출력 순서가 존재
        - 그렇기에 트리에도 선형적 관계 사용이 가능
        - '4. in-order.py' 참고