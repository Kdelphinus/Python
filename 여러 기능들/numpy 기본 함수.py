import numpy as np


"""np.sum, np.mean, np.nansum, np.nanmean"""

A = np.array(
    [
        [3, 3, 2, 3, 1],
        [5, 2, 2, 3, 1],
        [3, 3, 2, 3, 1],
        [3, 1, 4, 3, 1],
    ]
)

# 모든 요소들의 합과 평균
print(np.sum(A))  # 49
print(np.mean(A))  # 2.45

B = np.array(
    [
        [3, 3, 2, 3, 1],
        [5, 2, 2, 3, 1],
        [3, np.nan, 2, 3, 1],
        [3, 1, 4, 3, 1],
    ]
)

# nan이 하나라도 있으면 nan을 리턴
print(np.sum(B))  # nan
print(np.mean(B))  # nan

# nan을 제외한 나머지 값들의 합과 평균
print(np.nansum(B))  # 46.0
print(np.nanmean(B))  # 2.421...

# ---------------------------------------------------------------------------------------

"""데이터 접근"""
A = np.array(
    [
        [3, 3, 2, 3, 1],
        [5, 2, 2, 3, 1],
        [3, 3, 2, 3, 1],
        [3, 1, 4, 3, 1],
    ]
)

# 행 접근법
print(A[0])  # array([3, 3, 2, 3, 1])
print(A[2][2])  # 2

# 열 접근법
print(A[:, 3])  # array([3, 3, 3, 3])
print(A[:, 0])  # array([3, 5, 3, 3])
print(A[3, :])  # array([3, 1, 4, 3, 1])  == A[3]

# ---------------------------------------------------------------------------------------

"""원하는 차원의 행렬을 임의로 생성"""
random_matrix = np.random.rand(3, 5)  # 3 x 5 행렬을 임의로 생성

# numpy에서 임의성 도구들의 결과가 일정하게 나오도록 해줌
np.random.seed(5)

# 평균 0, 표준 오차 1을 갖는 3 x 5 행렬을 임의로 생성
np.random.randn(3, 5)

# ---------------------------------------------------------------------------------------

"""행렬, 벡터 연산"""
a = np.array(
    [
        [1, 2, 3],
        [2, 3, 4],
        [3, 2, 1],
    ]
)

b = np.array(
    [
        [7, 8, 9],
        [4, 5, 6],
        [1, 2, 3],
    ]
)

a * b  # 요소별 곱하기
np.outer(a, b)  # 외적곱
a @ b  # 행렬 곱셉, 내적곱
a.T  # 전치 행렬

# ---------------------------------------------------------------------------------------

"""행렬 회전하기"""
matrix = np.array(
    [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
    ]
)

print(np.rot90(matrix))  # 시계방향으로 90도 회전
"""[[3 6 9]
    [2 5 8]
    [1 4 7]]"""

print(np.rot90(matrix, k=-1))  # 반시계방향으로 90도 회전
"""[[7 4 1]
    [8 5 2]
    [9 6 3]]"""

print(np.rot90(matrix, k=-2))  # 반시계방향으로 180도 회전
"""[[9 8 7]
    [6 5 4]
    [3 2 1]]"""

# ---------------------------------------------------------------------------------------

"""padding하기"""
# 위쪽 1행, 아래쪽 2행, 왼쪽 3행, 오른쪽 4행 0으로 패딩
# 새로생긴 곳은 0의 값을 갖는 상수로 채움
# mode와 constant_values는 기본값으로 constant와 0으로 설정되어 있음
print(np.pad(matrix, ((1, 2), (3, 4)), mode="constant", constant_values=0))
"""[[0 0 0 0 0 0 0 0 0 0]
    [0 0 0 1 2 3 0 0 0 0]
    [0 0 0 4 5 6 0 0 0 0]
    [0 0 0 7 8 9 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0]
    [0 0 0 0 0 0 0 0 0 0]]"""
