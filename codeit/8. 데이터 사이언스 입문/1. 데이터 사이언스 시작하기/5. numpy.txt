1. numpy(as np)
    1.1 개요
    - numerical python
    - 숫자와 관련한 함수들을 저장한 라이브러리
    - 숫자와 계산 등 전반적으로 파이썬 기본 기능보다 쉽고 빠르게 계산 가능
    - 주피터 연습을 위해 최대한 jupyter notebook으로 진행
    - numpy.array는 같은 타입만 넣을 수 있음
    - 수치 계산이 많고 복잡하거나 행렬같은 다차원 배열의 경우 사용

2. numpy array.ipynb
    - numpy.array([...]): numpy array를 생성
    - numpy.full(개수, 값): 값을 개수만큼 가지고 있는 numpy array를 생성
        - numpy.zeros(개수, dtype = 타입): 0을 개수만큼 가지고 있는 numpy array를 생성
        - numpy.ones(개수, dtype = 타입): 1을 개수만큼 가지고 있는 numpy array를 생성
    - numpy.random.random(개수): 0 ~ 1 사이의 임의의 값을 개수만큼 가진 numpy array를 생성
        - numpy 안에 random 모듈이 있음
    - numpy.arange(n): 0 ~ n-1까지 값들을 담은 numpy array를 생성
    - numpy.arange(n, m): n ~ m-1까지 값들을 담은 numpy array를 생성
    - numpy.arange(n, m, k): n ~ m-1까지 값들 중 간격이 k인 값들을 담은 numpy array를 생성

    - 슬라이싱과 인덱싱은 파이썬 리스트와 기본적으론 동일
    - arr[[인덱스 번호1, 인덱스 번호2]]: arr 안의 인덱스에 있는 값들을 numpy array로 리턴
    - arr[arr2]: arr2 안에 값들을 인덱스로 간주하여 arr 안 인덱스 값들을 numpy array로 리턴

    - arr * n: arr 값들을 모두 n배로(+, -, /, ** 등 연산 모두 가능)
    - arr1 * arr2: arr1과 arr2의 같은 인덱스값을 곱한다(+, -, /, ** 등 연산 모두 가능)
    - 이러한 연산은 원래 numpy array엔 저장되지 않으므로 저장하려면 다시 지정해야 한다

    - arr > 4: 4보다 크면 True, 작으면 False로 바꿈(다른 조건들도 사용 가능)
    - numpy.where(조건)을 통해 조건에 부합한 값은 True, 아닌 값은 False로 배열을 리턴
    
